#include <SFML/Graphics/CircleShape.hpp>
#include <SFML/Graphics/RectangleShape.hpp>
#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Graphics/Texture.hpp>
#include <SFML/System/Vector2.hpp>
#include <iostream>
#include <fstream>

#define width = 800
#define height = 600

class Wall
{
  public:
    Wall(sf::Vector2f start, sf::Vector2f end)
    {

    }
};

class Sector
{
  public:
    Sector(sf::Vector2f sector_dat[4])
    {
      
    }
};

class Map
{
  public:
    Map()
    {
      sf::Vector2f sector_dat[4] = {
        sf::Vector2f(2.f, 1.f),
        sf::Vector2f(3.f, 2.f),
        sf::Vector2f(2.f, 3.f),
        sf::Vector2f(1.f, 2.f)
      };

      Sector sectors = Sector(sector_dat);
    }  
};


int main ()
{
  sf::RenderWindow window(sf::VideoMode(800, 600), "Math lol");
  window.setVerticalSyncEnabled(true);

  sf::Time deltaTime;
  sf::Clock clock;

  sf::Texture pTexture;
  if (!pTexture.loadFromFile("img/player.png"))
  {
    std::cout << "problem loading player image from file line:12" << std::endl; 
  }
  sf::Sprite p;
  p.setTexture(pTexture);

  sf::RectangleShape yAxis(sf::Vector2f(1.f, 600.f));
  yAxis.setPosition(sf::Vector2f(800.f/2 - 0.5f, 0));
  sf::RectangleShape xAxis(sf::Vector2f(800.f, 1.f));
  xAxis.setPosition(sf::Vector2f(0, 600.f/2 - 0.5f));

  double px = 300;
  double py = 200;

  // run the program as long as the window is open
  while (window.isOpen())
  {
    deltaTime = clock.restart();

    p.setPosition(px, py);

    // check all the window's events that were triggered since the last iteration of the loop
    sf::Event event;
    while (window.pollEvent(event))
    {
      // "close requested" event: we close the window
      if (event.type == sf::Event::Closed) window.close();
    }
    window.clear(sf::Color(100, 100, 100, 255));
    
    window.draw(yAxis);
    window.draw(xAxis);
    window.draw(p);

    window.display();
  }
}
